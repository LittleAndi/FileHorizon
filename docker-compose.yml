# Quick start:
# 1. docker compose up -d --build
# 2. Visit health endpoint: http://localhost:8080/health
#
# To override options use environment variables (examples below). Copy this file to a local override or use an .env file.

services:
  redis:
    image: redis:latest
    container_name: filehorizon-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1000"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  poller:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - LOG_CONSOLE_DEV=true
      - Logging__LogLevel__Default=Information
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__Microsoft.Hosting.Lifetime=Information
      - Logging__LogLevel__FileHorizon=Debug
      # Role + feature flags
      - Pipeline__Role=Poller
      - Features__EnableFileTransfer=false
      - Features__EnableLocalPoller=true
      - Features__EnableFtpPoller=false
      - Features__EnableSftpPoller=false
      # Remote SFTP source (index 0 in RemoteFileSources.Sftp)
      - RemoteFileSources__Sftp__0__Name=PartnerSftp
      - RemoteFileSources__Sftp__0__Host=sftp
      - RemoteFileSources__Sftp__0__Port=22
      - RemoteFileSources__Sftp__0__RemotePath=/home/demo/upload
      - RemoteFileSources__Sftp__0__Username=demo
      - RemoteFileSources__Sftp__0__PasswordSecretRef=SFTP_PASS
      - RemoteFileSources__Sftp__0__MinStableSeconds=5
      - RemoteFileSources__Sftp__0__DestinationPath=/data/outboxC
      # Dev secret values consumed by InMemorySecretResolver (simple env lookup)
      - SFTP_PASS=password
      # Enable Redis queue
      - Redis__Enabled=true
      - Redis__Host=redis
      - Redis__Port=6379
      - Redis__StreamName=filehorizon:file-events
      - Redis__ConsumerGroup=filehorizon-workers
      - Redis__ConsumerNamePrefix=fh
      # Example file sources (adjust host paths as needed)
      - FileSources__Sources__0__Name=InboxA
      - FileSources__Sources__0__Path=/data/inboxA
      - FileSources__Sources__0__Pattern=*.*
      - FileSources__Sources__0__Recursive=true
      - FileSources__Sources__0__DestinationPath=/data/outboxA
      - FileSources__Sources__1__Name=InboxB
      - FileSources__Sources__1__Path=/data/inboxB
      - FileSources__Sources__1__Pattern=*.*
      - FileSources__Sources__1__Recursive=true
      - FileSources__Sources__1__DestinationPath=/data/outboxB
    ports:
      - "8080:8080" # only this one is published
    volumes:
      - type: bind
        source: ./_data/inboxA
        target: /data/inboxA
      - type: bind
        source: ./_data/outboxA
        target: /data/outboxA
      - type: bind
        source: ./_data/inboxB
        target: /data/inboxB
      - type: bind
        source: ./_data/outboxB
        target: /data/outboxB
      - type: bind
        source: ./_data/outboxC
        target: /data/outboxC
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      - LOG_CONSOLE_DEV=true
      - Logging__LogLevel__Default=Warning
      - Logging__LogLevel__Microsoft=Warning
      - Logging__LogLevel__Microsoft.Hosting.Lifetime=Warning
      - Logging__LogLevel__FileHorizon=Debug
      # Role + feature flags
      - Pipeline__Role=Worker
      - Features__EnableFileTransfer=true
      - Features__EnableLocalPoller=false
      - Features__EnableFtpPoller=false
      - Features__EnableSftpPoller=false
      # Polling behavior
      - Polling__IntervalMilliseconds=1000
      - Polling__BatchReadLimit=10
      # Enable Redis queue
      - Redis__Enabled=true
      - Redis__Host=redis
      - Redis__Port=6379
      - Redis__StreamName=filehorizon:file-events
      - Redis__ConsumerGroup=filehorizon-workers
      - Redis__ConsumerNamePrefix=fh
      # Example file sources (adjust host paths as needed), needs to match the poller file sources
      - FileSources__Sources__0__Name=InboxA
      - FileSources__Sources__0__Path=/data/inboxA
      - FileSources__Sources__0__Pattern=*.*
      - FileSources__Sources__0__Recursive=true
      - FileSources__Sources__0__MoveAfterProcessing=true
      - FileSources__Sources__0__DestinationPath=/data/outboxA
      - FileSources__Sources__0__CreateDestinationDirectories=true
      - FileSources__Sources__1__Name=InboxB
      - FileSources__Sources__1__Path=/data/inboxB
      - FileSources__Sources__1__Pattern=*.*
      - FileSources__Sources__1__Recursive=true
      - FileSources__Sources__1__MoveAfterProcessing=true
      - FileSources__Sources__1__DestinationPath=/data/outboxB
      - FileSources__Sources__1__CreateDestinationDirectories=true
      # Destination C available for remote SFTP processed files
    # --- Orchestrated processing (optional) ---
    # To enable the new orchestrated pipeline (router + protocol readers + sinks), uncomment below.
    # Keep legacy FileSources above for default behavior; these settings are safe to leave commented.
    # - Destinations__Local__0__Name=OutboxA
    # - Destinations__Local__0__BasePath=/data/outboxA
    # - Destinations__Local__0__Overwrite=true
    # - Routing__Rules__0__Match__Protocol=local
    # - Routing__Rules__0__Match__PathPattern=^/data/inboxA/.+\\.txt$
    # - Routing__Rules__0__Destination=OutboxA
    # - Transfer__ChunkSizeBytes=32768
    # - Transfer__Idempotency__Enabled=true
    # - Transfer__Idempotency__TtlSeconds=86400
    deploy:
      replicas: 3
    volumes:
      - type: bind
        source: ./_data/inboxA
        target: /data/inboxA
      - type: bind
        source: ./_data/outboxA
        target: /data/outboxA
      - type: bind
        source: ./_data/inboxB
        target: /data/inboxB
      - type: bind
        source: ./_data/outboxB
        target: /data/outboxB
      - type: bind
        source: ./_data/outboxC
        target: /data/outboxC
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      poller:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: filehorizon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      poller:
        condition: service_healthy
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: filehorizon-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

  sftp:
    image: atmoz/sftp:latest
    container_name: filehorizon-sftp
    # Format: user:password:uid:gid:subdir
    command: "demo:password:1001:100:upload"
    ports:
      - "2222:22"
    volumes:
      - ./_data/sftp-in:/home/demo/upload
    healthcheck:
      test:
        [
          "CMD",
          "sh",
          "-c",
          "echo 'quit' | sftp -P 22 demo@localhost 2>/dev/null || exit 1",
        ]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 10s
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  grafana_data:
    driver: local
