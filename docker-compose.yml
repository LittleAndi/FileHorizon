# Quick start:
# 1. docker compose up -d --build
# 2. Visit health endpoint: http://localhost:8080/health
#
# To override options use environment variables (examples below). Copy this file to a local override or use an .env file.

services:
  redis:
    image: redis:latest
    container_name: filehorizon-redis
    ports:
      - "6379:6379"
    command: ["redis-server", "--appendonly", "yes", "--save", "60", "1000"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  poller:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      LOG_CONSOLE_DEV: "true"
      Logging__LogLevel__Default: Information
      Logging__LogLevel__Microsoft: Warning
      Logging__LogLevel__Microsoft.Hosting.Lifetime: Information
      Logging__LogLevel__FileHorizon: Debug
      # Role + feature flags
      Pipeline__Role: "Poller"
      Features__EnableFileTransfer: "false"
      Features__EnableLocalPoller: "true"
      Features__EnableFtpPoller: "false"
      Features__EnableSftpPoller: "false"
      # Polling behavior
      Polling__IntervalMilliseconds: 1000
      Polling__BatchReadLimit: 10
      # Enable Redis queue
      Redis__Enabled: "true"
      Redis__Host: redis
      Redis__Port: 6379
      Redis__StreamName: filehorizon:file-events
      Redis__ConsumerGroup: filehorizon-workers
      Redis__ConsumerNamePrefix: fh
      # Example file sources (adjust host paths as needed)
      FileSources__Sources__0__Name: InboxA
      FileSources__Sources__0__Path: /data/inboxA
      FileSources__Sources__0__Pattern: "*.*"
      FileSources__Sources__0__Recursive: "true"
      FileSources__Sources__0__DestinationPath: /data/outboxA
      FileSources__Sources__1__Name: InboxB
      FileSources__Sources__1__Path: /data/inboxB
      FileSources__Sources__1__Pattern: "*.*"
      FileSources__Sources__1__Recursive: "true"
      FileSources__Sources__1__DestinationPath: /data/outboxB
    ports:
      - "8080:8080" # only this one is published
    volumes:
      - type: bind
        source: ./_data/inboxA
        target: /data/inboxA
      - type: bind
        source: ./_data/outboxA
        target: /data/outboxA
      - type: bind
        source: ./_data/inboxB
        target: /data/inboxB
      - type: bind
        source: ./_data/outboxB
        target: /data/outboxB
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      redis:
        condition: service_healthy
    restart: unless-stopped

  worker:
    build:
      context: .
      dockerfile: Dockerfile
    environment:
      LOG_CONSOLE_DEV: "true"
      Logging__LogLevel__Default: Warning
      Logging__LogLevel__Microsoft: Warning
      Logging__LogLevel__Microsoft.Hosting.Lifetime: Warning
      Logging__LogLevel__FileHorizon: Debug
      # Role + feature flags
      Pipeline__Role: "Worker"
      Features__EnableFileTransfer: "true"
      Features__EnableLocalPoller: "false"
      Features__EnableFtpPoller: "false"
      Features__EnableSftpPoller: "false"
      # Polling behavior
      Polling__IntervalMilliseconds: 1000
      Polling__BatchReadLimit: 10
      # Enable Redis queue
      Redis__Enabled: "true"
      Redis__Host: redis
      Redis__Port: 6379
      Redis__StreamName: filehorizon:file-events
      Redis__ConsumerGroup: filehorizon-workers
      Redis__ConsumerNamePrefix: fh
      # Example file sources (adjust host paths as needed), needs to match the poller file sources
      FileSources__Sources__0__Name: InboxA
      FileSources__Sources__0__Path: /data/inboxA
      FileSources__Sources__0__Pattern: "*.*"
      FileSources__Sources__0__Recursive: "true"
      FileSources__Sources__0__MoveAfterProcessing: "true"
      FileSources__Sources__0__DestinationPath: /data/outboxA
      FileSources__Sources__0__CreateDestinationDirectories: "true"
      FileSources__Sources__1__Name: InboxB
      FileSources__Sources__1__Path: /data/inboxB
      FileSources__Sources__1__Pattern: "*.*"
      FileSources__Sources__1__Recursive: "true"
      FileSources__Sources__1__MoveAfterProcessing: "true"
      FileSources__Sources__1__DestinationPath: /data/outboxB
      FileSources__Sources__1__CreateDestinationDirectories: "true"
    deploy:
      replicas: 3
    volumes:
      - type: bind
        source: ./_data/inboxA
        target: /data/inboxA
      - type: bind
        source: ./_data/outboxA
        target: /data/outboxA
      - type: bind
        source: ./_data/inboxB
        target: /data/inboxB
      - type: bind
        source: ./_data/outboxB
        target: /data/outboxB
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:8080/health"]
      interval: 15s
      timeout: 5s
      retries: 5
      start_period: 15s
    depends_on:
      poller:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped

  prometheus:
    image: prom/prometheus:latest
    container_name: filehorizon-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml:ro
    depends_on:
      poller:
        condition: service_healthy
    restart: unless-stopped

  grafana:
    image: grafana/grafana:latest
    container_name: filehorizon-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      GF_USERS_ALLOW_SIGN_UP: "false"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources:ro
      - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./grafana/dashboards:/var/lib/grafana/dashboards:ro
    depends_on:
      prometheus:
        condition: service_started
    restart: unless-stopped

volumes:
  redis_data:
    driver: local
  grafana_data:
    driver: local
